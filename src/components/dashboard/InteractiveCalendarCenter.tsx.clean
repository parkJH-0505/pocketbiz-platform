/**
 * Interactive Calendar Center Component
 *
 * 확장된 인터랙티브 캘린더 + 통합 이벤트 센터
 * - 좌측: 캘린더 뷰 (75%)
 * - 우측: 인사이트 패널 (25%)
 * - 실제 일정과 프로젝트 데이터만 표시
 * - 드래그&드롭으로 새 일정 생성
 */

import React, { useState, useMemo, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import {
  Calendar,
  ChevronLeft,
  ChevronRight,
  Clock,
  Plus,
  Check,
  BarChart3,
  Users,
  Briefcase,
  AlertCircle
} from 'lucide-react';
import { format, addDays, startOfWeek, isToday } from 'date-fns';
import { ko } from 'date-fns/locale';
import { useDashboard } from '../../contexts/DashboardContext';
import { useScheduleContext } from '../../contexts/ScheduleContext';
import type { UnifiedCalendarEvent } from '../../types/unifiedCalendar.types';
import { SMART_MATCHING_CATEGORY_STYLES } from '../../types/unifiedCalendar.types';
import { isSameDay as isSameDayUtil } from '../../utils/unifiedCalendar.utils';
import { useDashboardInteraction } from '../../contexts/DashboardInteractionContext';
import { useKPIDiagnosis } from '../../contexts/KPIDiagnosisContext';
import { useBuildupContext } from '../../contexts/BuildupContext';

interface InteractiveCalendarCenterProps {
  className?: string;
}

const InteractiveCalendarCenter: React.FC<InteractiveCalendarCenterProps> = ({ className = '' }) => {
  const [searchQuery, setSearchQuery] = useState('');
  const [refreshKey, setRefreshKey] = useState(0);

  // Contexts
  const { draggedEvent, setDraggedEvent, hoveredDay, setHoveredDay, addEventToCalendar } = useDashboardInteraction();
  const { overallScore } = useKPIDiagnosis();
  const { currentWeek, navigateWeek } = useDashboard();
  const { schedules } = useScheduleContext();

  // 주간 날짜 생성
  const weekStart = startOfWeek(currentWeek, { weekStartsOn: 1 });
  const weekDates = Array.from({ length: 7 }, (_, i) => addDays(weekStart, i));

  // calendar-refresh 이벤트 리스너
  useEffect(() => {
    const handleCalendarRefresh = () => {
      setRefreshKey(prev => prev + 1);
    };
    window.addEventListener('calendar-refresh', handleCalendarRefresh);
    return () => {
      window.removeEventListener('calendar-refresh', handleCalendarRefresh);
    };
  }, []);

  // 통합된 캘린더 이벤트 생성
  const unifiedEvents = useMemo(() => {
    const events: UnifiedCalendarEvent[] = [];

    // ScheduleContext에서 스케줄 추가
    schedules
      .filter(schedule => schedule.type === 'external_meeting' && schedule.metadata?.source === 'smart_matching')
      .forEach(schedule => {
        const event: UnifiedCalendarEvent = {
          id: schedule.id,
          sourceType: 'smart_matching',
          title: schedule.title,
          description: schedule.description || '',
          date: new Date(schedule.date),
          time: schedule.time,
          category: schedule.metadata?.category || 'external_meeting',
          priority: schedule.priority === 'high' ? 'high' : schedule.priority === 'medium' ? 'medium' : 'low',
          status: schedule.status === 'completed' ? 'completed' : 'pending',
          metadata: {
            ...schedule.metadata,
            addedByDragDrop: true
          }
        } as UnifiedCalendarEvent;
        events.push(event);
      });

    // 실제 프로젝트 마일스톤 추가 (예시 - BuildupContext 활용 필요)
    // TODO: BuildupContext에서 activeProjects의 milestones 가져오기

    return events;
  }, [schedules, refreshKey]);

  // 특정 날짜의 이벤트 가져오기
  const getEventsForDate = (date: Date) => {
    return unifiedEvents.filter(event => isSameDayUtil(event.date, date));
  };

  // 실제 일정 기반 이벤트
  const realEvents = useMemo(() => {
    // 주간 필터링된 실제 이벤트만 반환
    return unifiedEvents.filter(event => {
      const eventDate = new Date(event.date);
      const weekEnd = addDays(weekStart, 7);
      return eventDate >= weekStart && eventDate < weekEnd;
    });
  }, [unifiedEvents, weekStart]);

  // 오늘 일정
  const todayEvents = useMemo(() => {
    const today = new Date();
    return realEvents.filter(event =>
      isSameDayUtil(event.date, today)
    );
  }, [realEvents]);

  return (
    <div className={`bg-white rounded-2xl shadow-sm overflow-hidden ${className}`}>
      {/* 통합 헤더 - 캘린더 네비게이션 */}
      <div className="px-6 py-4 bg-gradient-to-r from-white to-gray-50 border-b border-gray-100">
        <div className="flex items-center justify-between">
          {/* 왼쪽: 날짜 네비게이션 */}
          <div className="flex items-center gap-3">
            <button
              onClick={() => navigateWeek('prev')}
              className="p-2 hover:bg-white/80 rounded-lg transition-all duration-200 hover:shadow-sm"
            >
              <ChevronLeft className="w-5 h-5 text-gray-600" />
            </button>
            <div className="flex items-center gap-2">
              <Calendar className="w-5 h-5 text-blue-600" />
              <h3 className="font-bold text-lg text-gray-900">
                {format(weekStart, 'yyyy년 M월 d일', { locale: ko })} - {format(addDays(weekStart, 6), 'M월 d일', { locale: ko })}
              </h3>
            </div>
            <button
              onClick={() => navigateWeek('next')}
              className="p-2 hover:bg-white/80 rounded-lg transition-all duration-200 hover:shadow-sm"
            >
              <ChevronRight className="w-5 h-5 text-gray-600" />
            </button>
            <button
              onClick={() => navigateWeek('today')}
              className="px-3 py-1.5 bg-blue-600 text-white rounded-lg text-sm font-medium hover:bg-blue-700 transition-colors"
            >
              오늘
            </button>
          </div>

          {/* 오른쪽: 빠른 액션 */}
          <div className="flex items-center gap-2">
            <button
              onClick={() => console.log('Add schedule')}
              className="px-3 py-1.5 bg-green-600 text-white rounded-lg text-sm font-medium hover:bg-green-700 transition-colors flex items-center gap-1"
            >
              <Plus className="w-4 h-4" />
              일정 추가
            </button>
          </div>
        </div>
      </div>

      {/* 메인 컨텐츠 - 75:25 비율 */}
      <div className="flex" style={{ minHeight: '600px' }}>
        {/* 캘린더 영역 (75%) */}
        <div className="flex-[75] p-6">
          {/* 캘린더 그리드 직접 구현 */}
          <div className="grid grid-cols-7 gap-3">
            {/* 요일 헤더 */}
            {['월', '화', '수', '목', '금', '토', '일'].map((day, index) => (
              <div
                key={day}
                className="text-center py-2 text-sm font-medium text-gray-600"
              >
                {day}
              </div>
            ))}

            {/* 날짜 셀들 */}
            {weekDates.map((date, index) => {
              const isCurrentDay = isToday(date);
              const dateString = format(date, 'yyyy-MM-dd');
              const isDragOver = hoveredDay === dateString;

              return (
                <motion.div
                  key={index}
                  className={`min-h-[120px] rounded-xl border-2 transition-all overflow-hidden ${
                    isCurrentDay
                      ? 'border-blue-400 bg-blue-50/50'
                      : isDragOver
                      ? 'border-blue-400 bg-blue-50 scale-105'
                      : 'border-gray-200 bg-white hover:border-gray-300 hover:shadow-sm'
                  }`}
                  whileHover={{ scale: 1.02 }}
                  onDragOver={(e) => {
                    e.preventDefault();
                    if (draggedEvent) {
                      setHoveredDay(dateString);
                    }
                  }}
                  onDragLeave={() => {
                    setHoveredDay(null);
                  }}
                  onDrop={async (e) => {
                    e.preventDefault();
                    if (draggedEvent) {
                      try {
                        const success = await addEventToCalendar(draggedEvent, date);
                        if (success) {
                          setRefreshKey(prev => prev + 1);
                        }
                      } catch (error) {
                        console.error('Failed to add event:', error);
                      } finally {
                        setDraggedEvent(null);
                        setHoveredDay(null);
                      }
                    }
                  }}
                >
                  {/* 날짜 헤더 */}
                  <div className={`px-3 py-2 border-b ${
                    isCurrentDay ? 'bg-blue-100/50 border-blue-200' : 'bg-gray-50/50 border-gray-100'
                  }`}>
                    <div className="flex items-center justify-between">
                      <span className={`text-sm font-bold ${
                        isCurrentDay ? 'text-blue-700' : 'text-gray-900'
                      }`}>
                        {format(date, 'd')}
                      </span>
                      {isCurrentDay && (
                        <span className="px-2 py-0.5 bg-blue-600 text-white text-xs rounded-full">
                          오늘
                        </span>
                      )}
                    </div>
                  </div>

                  {/* 이벤트 목록 */}
                  <div className="p-2 space-y-1">
                    <AnimatePresence>
                      {getEventsForDate(date).slice(0, 3).map((event) => (
                        <motion.div
                          key={event.id}
                          layout
                          initial={{ opacity: 0, scale: 0.9 }}
                          animate={{ opacity: 1, scale: 1 }}
                          exit={{ opacity: 0, scale: 0.9 }}
                          className="px-2 py-1 text-xs rounded-md cursor-pointer group hover:shadow-sm transition-all"
                          style={{
                            backgroundColor: event.sourceType === 'smart_matching'
                              ? SMART_MATCHING_CATEGORY_STYLES[event.category]?.bgColor || '#f3f4f6'
                              : '#e0f2fe',
                            color: event.sourceType === 'smart_matching'
                              ? SMART_MATCHING_CATEGORY_STYLES[event.category]?.textColor || '#374151'
                              : '#0369a1'
                          }}
                        >
                          <div className="flex items-center gap-1">
                            {event.sourceType === 'smart_matching' ? (
                              <span className="text-[10px]">
                                {SMART_MATCHING_CATEGORY_STYLES[event.category]?.icon || '📅'}
                              </span>
                            ) : (
                              <Users className="w-3 h-3" />
                            )}
                            <span className="truncate font-medium">
                              {event.title.length > 12 ? event.title.substring(0, 12) + '...' : event.title}
                            </span>
                          </div>
                        </motion.div>
                      ))}
                    </AnimatePresence>
                    {getEventsForDate(date).length > 3 && (
                      <span className="text-[10px] text-gray-500 pl-2">
                        +{getEventsForDate(date).length - 3} more
                      </span>
                    )}
                    {isDragOver && (
                      <motion.div
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 1 }}
                        className="text-xs text-blue-600 text-center py-1 border-2 border-dashed border-blue-300 rounded-md bg-blue-50"
                      >
                        ✨ 여기에 드롭
                      </motion.div>
                    )}
                    {getEventsForDate(date).length === 0 && !isDragOver && (
                      <div className="text-center py-3 text-gray-400">
                        <Plus className="w-3 h-3 mx-auto mb-1" />
                        <p className="text-[10px]">일정 없음</p>
                      </div>
                    )}
                  </div>
                </motion.div>
              );
            })}
          </div>
        </div>

        {/* 인사이트 패널 (25%) */}
        <div className="flex-[25] bg-gradient-to-b from-gray-50/50 to-white p-4">
          {/* 오늘의 포커스 */}
          <div className="mb-4">
            <h3 className="text-sm font-semibold text-gray-700 mb-3">오늘의 포커스</h3>
            {todayEvents.length > 0 ? (
              <div className="space-y-2">
                {todayEvents.map(event => (
                  <div key={event.id} className="p-2 bg-blue-50 border border-blue-200 rounded-lg">
                    <p className="text-xs font-medium text-blue-900">{event.title}</p>
                    {event.time && (
                      <p className="text-xs text-blue-700 mt-1">
                        <Clock className="w-3 h-3 inline mr-1" />
                        {event.time}
                      </p>
                    )}
                  </div>
                ))}
              </div>
            ) : (
              <div className="p-3 bg-gray-50 rounded-lg text-center">
                <p className="text-xs text-gray-500">오늘 예정된 일정이 없습니다</p>
                <button className="mt-2 text-xs text-blue-600 hover:text-blue-700">
                  + 새 일정 추가
                </button>
              </div>
            )}
          </div>

          {/* 실행 가능한 인사이트 */}
          <div className="space-y-3">
            <h3 className="text-sm font-semibold text-gray-700">실행 가능한 인사이트</h3>

            {/* KPI 업데이트 리마인더 */}
            {overallScore < 70 && (
              <div className="p-3 bg-orange-50 border border-orange-200 rounded-lg">
                <div className="flex items-center gap-2 mb-2">
                  <AlertCircle className="w-4 h-4 text-orange-600" />
                  <span className="text-xs font-medium text-orange-900">KPI 개선 필요</span>
                </div>
                <p className="text-xs text-gray-700 mb-2">
                  현재 점수: {overallScore.toFixed(1)}점
                </p>
                <button className="text-xs text-orange-600 hover:text-orange-700 font-medium">
                  KPI 업데이트 →
                </button>
              </div>
            )}

            {/* 빠른 추가 섹션 */}
            <div className="p-3 bg-gray-50 rounded-lg">
              <h4 className="text-xs font-medium text-gray-700 mb-2">빠른 추가</h4>
              <div className="grid grid-cols-2 gap-2">
                <button className="p-2 bg-white border border-gray-200 rounded hover:bg-gray-50 text-xs">
                  <Users className="w-3 h-3 mb-1 mx-auto" />
                  미팅
                </button>
                <button className="p-2 bg-white border border-gray-200 rounded hover:bg-gray-50 text-xs">
                  <BarChart3 className="w-3 h-3 mb-1 mx-auto" />
                  KPI
                </button>
                <button className="p-2 bg-white border border-gray-200 rounded hover:bg-gray-50 text-xs">
                  <Briefcase className="w-3 h-3 mb-1 mx-auto" />
                  프로젝트
                </button>
                <button className="p-2 bg-white border border-gray-200 rounded hover:bg-gray-50 text-xs">
                  <Check className="w-3 h-3 mb-1 mx-auto" />
                  할일
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* 푸터 - 실제 상태 표시 */}
      <div className="px-6 py-3 bg-gradient-to-r from-gray-50 to-white border-t border-gray-100">
        <div className="flex justify-between items-center text-sm">
          <div className="flex items-center gap-4 text-gray-600">
            <span className="flex items-center gap-1">
              <Calendar className="w-4 h-4" />
              이번 주 일정 {realEvents.length}개
            </span>
            <span className="text-gray-300">|</span>
            <span className="flex items-center gap-1">
              <Clock className="w-4 h-4" />
              오늘 일정 {todayEvents.length}개
            </span>
          </div>
          <div className="flex items-center gap-2">
            {draggedEvent ? (
              <span className="text-blue-600 font-medium animate-pulse">
                🎯 캘린더에 드롭하세요
              </span>
            ) : (
              <span className="text-gray-500 text-xs">
                빈 날짜를 클릭하여 새 일정 추가
              </span>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default InteractiveCalendarCenter;