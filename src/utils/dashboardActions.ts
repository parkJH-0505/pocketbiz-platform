/**
 * Dashboard Actions Utilities
 *
 * ÎåÄÏãúÎ≥¥Îìú Ïª¥Ìè¨ÎÑåÌä∏Îì§ÏóêÏÑú ÏÇ¨Ïö©ÌïòÎäî Í≥µÌÜµ Ïï°ÏÖò Ìï®ÏàòÎì§
 * - Ïù¥Î≤§Ìä∏ Î≥ÄÌôò Î∞è Ï≤òÎ¶¨
 * - Îç∞Ïù¥ÌÑ∞ Î≥ÄÌôò Ïú†Ìã∏Î¶¨Ìã∞
 * - Í≥ÑÏÇ∞ Î∞è Î∂ÑÏÑù Ìï®ÏàòÎì§
 */

// Ï∂ïÎ≥Ñ ÎùºÎ≤® Îß§Ìïë
export const getAxisLabel = (axis: string): string => {
  const labels: Record<string, string> = {
    GO: 'ÏÇ¨ÏóÖÎ™©Ìëú',
    EC: 'ÏÇ¨ÏóÖÌôòÍ≤Ω',
    PT: 'Ï†úÌíàÍ∏∞Ïà†',
    PF: 'ÏÑ±Í≥ºÍ≤ÄÏ¶ù',
    TO: 'ÌåÄÏ°∞ÏßÅ'
  };
  return labels[axis] || axis;
};

// Ï∂ïÎ≥Ñ ÏÉâÏÉÅ Îß§Ìïë
export const getAxisColor = (axis: string): string => {
  const colors: Record<string, string> = {
    GO: '#3b82f6', // blue
    EC: '#10b981', // green
    PT: '#8b5cf6', // purple
    PF: '#f59e0b', // yellow
    TO: '#ef4444'  // red
  };
  return colors[axis] || '#6b7280';
};

// Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ ÎùºÎ≤® Îß§Ìïë
export const getCategoryLabel = (category: string): string => {
  const labels: Record<string, string> = {
    'government_support': 'Ï†ïÎ∂ÄÏßÄÏõêÏÇ¨ÏóÖ',
    'tips_program': 'TIPS/R&D',
    'vc_opportunity': 'VC/Ìà¨Ïûê',
    'accelerator': 'Ïï°ÏÖÄÎü¨Î†àÏù¥ÌÑ∞',
    'competition': 'Í≥µÎ™®Ï†Ñ/ÎåÄÌöå',
    'education': 'ÍµêÏú°/ÏÑ∏ÎØ∏ÎÇò'
  };
  return labels[category] || category;
};

// D-day Í≥ÑÏÇ∞
export const calculateDDay = (deadline: string | Date): number => {
  const deadlineDate = typeof deadline === 'string' ? new Date(deadline) : deadline;
  const today = new Date();
  const diffTime = deadlineDate.getTime() - today.getTime();
  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  return diffDays;
};

// Í∏¥Í∏âÎèÑ ÌåêÏ†ï
export const getUrgencyLevel = (daysUntilDeadline: number): 'high' | 'medium' | 'low' => {
  if (daysUntilDeadline <= 7) return 'high';
  if (daysUntilDeadline <= 14) return 'medium';
  return 'low';
};

// Ï†êÏàò Î≥ÄÌôî Í≥ÑÏÇ∞
export const calculateScoreChange = (current: number, previous: number) => {
  const change = current - previous;
  return {
    value: Math.abs(change),
    trend: change > 0 ? 'up' : change < 0 ? 'down' : 'neutral',
    percentage: previous > 0 ? (change / previous) * 100 : 0
  };
};

// ÌîÑÎ°úÏ†ùÌä∏ ÏôÑÎ£åÏú® Í≥ÑÏÇ∞
export const calculateProjectCompletionRate = (activeCount: number, completedCount: number): number => {
  const total = activeCount + completedCount;
  return total > 0 ? (completedCount / total) * 100 : 0;
};

// Í∏¥Í∏â ÏÉÅÌô© Í∞êÏßÄ
export const detectUrgentSituations = (events: any[], projects: any[], documents: any[]) => {
  const urgentItems = [];

  // ÎßàÍ∞êÏûÑÎ∞ï Ïù¥Î≤§Ìä∏ (D-12 Ïù¥ÎÇ¥)
  const urgentEvents = events.filter(event =>
    event.daysUntilDeadline <= 12 && event.daysUntilDeadline > 0
  );

  urgentItems.push(...urgentEvents.map(event => ({
    type: 'smart_matching_deadline',
    title: event.title,
    deadline: event.daysUntilDeadline,
    priority: event.daysUntilDeadline <= 7 ? 'high' : 'medium',
    action: 'add_to_calendar',
    data: event
  })));

  // ÏúÑÌóò ÌîÑÎ°úÏ†ùÌä∏ (D-5 Ïù¥ÎÇ¥)
  const riskProjects = projects.filter(project => {
    // TODO: Phase 3ÏóêÏÑú Ïã§Ï†ú getUrgentProjects() Î°úÏßÅ Ïó∞Îèô
    return false; // ÏûÑÏãú
  });

  // VDR ÏóÖÎ°úÎìú Î∂ÄÏ°±
  const projectsNeedingDocs = projects.filter(project => {
    const projectDocs = documents.filter(doc => doc.projectId === project.id);
    return projectDocs.length < 3;
  });

  return urgentItems.sort((a, b) => (a.deadline || 99) - (b.deadline || 99));
};

// Î™©Ìëú Îã¨ÏÑ±Î•† Í≥ÑÏÇ∞
export const calculateTargetProgress = (currentScore: number, targetScore: number = 85): number => {
  return Math.min((currentScore / targetScore) * 100, 100);
};

// ÏÑ±Ïû• Î™®Î©òÌÖÄ Î∂ÑÏÑù
export const analyzeGrowthMomentum = (currentScores: Record<string, number>, previousScores: Record<string, number>) => {
  const improvements = [];
  const declines = [];

  Object.entries(currentScores).forEach(([axis, currentScore]) => {
    const previousScore = previousScores[axis] || 0;
    const change = currentScore - previousScore;

    if (change > 0) {
      improvements.push({ axis, change, percentage: (change / previousScore) * 100 });
    } else if (change < 0) {
      declines.push({ axis, change: Math.abs(change), percentage: Math.abs(change / previousScore) * 100 });
    }
  });

  return {
    improvements: improvements.sort((a, b) => b.change - a.change),
    declines: declines.sort((a, b) => b.change - a.change),
    overallTrend: improvements.length > declines.length ? 'positive' :
                  improvements.length < declines.length ? 'negative' : 'neutral'
  };
};

// ÎîîÎ≤ÑÍ∑∏ Ìó¨Ìçº - Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ Íµ¨Ï°∞ ÌôïÏù∏Ïö©
export const debugDataStructure = (data: any, label: string) => {
  if (process.env.NODE_ENV === 'development') {
    console.group(`üîç [DEBUG] ${label} Îç∞Ïù¥ÌÑ∞ Íµ¨Ï°∞`);
    console.log('Data:', data);
    console.log('Type:', typeof data);
    if (data && typeof data === 'object') {
      console.log('Keys:', Object.keys(data));
    }
    console.groupEnd();
  }
};